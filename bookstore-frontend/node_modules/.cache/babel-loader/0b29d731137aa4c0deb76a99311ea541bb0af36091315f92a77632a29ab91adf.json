{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5000';\nexport const getBooks = () => axios.get(`${API_URL}/books`);\nexport const getBookById = id => axios.get(`${API_URL}/books/${id}`);\nexport const addBook = book => axios.post(`${API_URL}/books`, book);\nexport const updateBook = (id, book) => axios.put(`${API_URL}/books/${id}`, book);\nexport const deleteBook = id => axios.delete(`${API_URL}/books/${id}`);\nexport const loginUser = async credentials => {\n  const response = await axios.get(`${API_URL}/users`, {\n    params: {\n      email: credentials.email,\n      password: credentials.password\n    }\n  });\n  if (response.data.length === 0) throw new Error('Invalid credentials');\n  return {\n    data: {\n      ...response.data[0],\n      token: `mock_token_${response.data[0].id}`\n    }\n  };\n};\nexport const registerUser = userData => axios.post(`${API_URL}/users`, userData);\nexport const forgotPassword = async emailData => {\n  const response = await axios.get(`${API_URL}/users`, {\n    params: {\n      email: emailData.email\n    }\n  });\n  if (response.data.length === 0) throw new Error('Email not found');\n  return {\n    data: {\n      message: 'Reset link sent'\n    }\n  };\n};\nexport const updateUser = (id, userData) => axios.put(`${API_URL}/users/${id}`, userData);\nexport const changePassword = async (id, passwordData) => {\n  const response = await axios.get(`${API_URL}/users/${id}`);\n  if (response.data.password !== passwordData.current) throw new Error('Current password incorrect');\n  return axios.put(`${API_URL}/users/${id}`, {\n    ...response.data,\n    password: passwordData.new\n  });\n};","map":{"version":3,"names":["axios","API_URL","getBooks","get","getBookById","id","addBook","book","post","updateBook","put","deleteBook","delete","loginUser","credentials","response","params","email","password","data","length","Error","token","registerUser","userData","forgotPassword","emailData","message","updateUser","changePassword","passwordData","current","new"],"sources":["C:/Users/DELL/OneDrive/Desktop/cc/bookstore-frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000';\r\n\r\nexport const getBooks = () => axios.get(`${API_URL}/books`);\r\nexport const getBookById = (id) => axios.get(`${API_URL}/books/${id}`);\r\nexport const addBook = (book) => axios.post(`${API_URL}/books`, book);\r\nexport const updateBook = (id, book) => axios.put(`${API_URL}/books/${id}`, book);\r\nexport const deleteBook = (id) => axios.delete(`${API_URL}/books/${id}`);\r\n\r\nexport const loginUser = async (credentials) => {\r\n  const response = await axios.get(`${API_URL}/users`, {\r\n    params: { email: credentials.email, password: credentials.password }\r\n  });\r\n  if (response.data.length === 0) throw new Error('Invalid credentials');\r\n  return { data: { ...response.data[0], token: `mock_token_${response.data[0].id}` } };\r\n};\r\n\r\nexport const registerUser = (userData) => axios.post(`${API_URL}/users`, userData);\r\n\r\nexport const forgotPassword = async (emailData) => {\r\n  const response = await axios.get(`${API_URL}/users`, {\r\n    params: { email: emailData.email }\r\n  });\r\n  if (response.data.length === 0) throw new Error('Email not found');\r\n  return { data: { message: 'Reset link sent' } };\r\n};\r\n\r\nexport const updateUser = (id, userData) => axios.put(`${API_URL}/users/${id}`, userData);\r\n\r\nexport const changePassword = async (id, passwordData) => {\r\n  const response = await axios.get(`${API_URL}/users/${id}`);\r\n  if (response.data.password !== passwordData.current) throw new Error('Current password incorrect');\r\n  return axios.put(`${API_URL}/users/${id}`, { ...response.data, password: passwordData.new });\r\n};"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;AAEvC,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAMF,KAAK,CAACG,GAAG,CAAC,GAAGF,OAAO,QAAQ,CAAC;AAC3D,OAAO,MAAMG,WAAW,GAAIC,EAAE,IAAKL,KAAK,CAACG,GAAG,CAAC,GAAGF,OAAO,UAAUI,EAAE,EAAE,CAAC;AACtE,OAAO,MAAMC,OAAO,GAAIC,IAAI,IAAKP,KAAK,CAACQ,IAAI,CAAC,GAAGP,OAAO,QAAQ,EAAEM,IAAI,CAAC;AACrE,OAAO,MAAME,UAAU,GAAGA,CAACJ,EAAE,EAAEE,IAAI,KAAKP,KAAK,CAACU,GAAG,CAAC,GAAGT,OAAO,UAAUI,EAAE,EAAE,EAAEE,IAAI,CAAC;AACjF,OAAO,MAAMI,UAAU,GAAIN,EAAE,IAAKL,KAAK,CAACY,MAAM,CAAC,GAAGX,OAAO,UAAUI,EAAE,EAAE,CAAC;AAExE,OAAO,MAAMQ,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACG,GAAG,CAAC,GAAGF,OAAO,QAAQ,EAAE;IACnDe,MAAM,EAAE;MAAEC,KAAK,EAAEH,WAAW,CAACG,KAAK;MAAEC,QAAQ,EAAEJ,WAAW,CAACI;IAAS;EACrE,CAAC,CAAC;EACF,IAAIH,QAAQ,CAACI,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EACtE,OAAO;IAAEF,IAAI,EAAE;MAAE,GAAGJ,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;MAAEG,KAAK,EAAE,cAAcP,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC,CAACd,EAAE;IAAG;EAAE,CAAC;AACtF,CAAC;AAED,OAAO,MAAMkB,YAAY,GAAIC,QAAQ,IAAKxB,KAAK,CAACQ,IAAI,CAAC,GAAGP,OAAO,QAAQ,EAAEuB,QAAQ,CAAC;AAElF,OAAO,MAAMC,cAAc,GAAG,MAAOC,SAAS,IAAK;EACjD,MAAMX,QAAQ,GAAG,MAAMf,KAAK,CAACG,GAAG,CAAC,GAAGF,OAAO,QAAQ,EAAE;IACnDe,MAAM,EAAE;MAAEC,KAAK,EAAES,SAAS,CAACT;IAAM;EACnC,CAAC,CAAC;EACF,IAAIF,QAAQ,CAACI,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EAClE,OAAO;IAAEF,IAAI,EAAE;MAAEQ,OAAO,EAAE;IAAkB;EAAE,CAAC;AACjD,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGA,CAACvB,EAAE,EAAEmB,QAAQ,KAAKxB,KAAK,CAACU,GAAG,CAAC,GAAGT,OAAO,UAAUI,EAAE,EAAE,EAAEmB,QAAQ,CAAC;AAEzF,OAAO,MAAMK,cAAc,GAAG,MAAAA,CAAOxB,EAAE,EAAEyB,YAAY,KAAK;EACxD,MAAMf,QAAQ,GAAG,MAAMf,KAAK,CAACG,GAAG,CAAC,GAAGF,OAAO,UAAUI,EAAE,EAAE,CAAC;EAC1D,IAAIU,QAAQ,CAACI,IAAI,CAACD,QAAQ,KAAKY,YAAY,CAACC,OAAO,EAAE,MAAM,IAAIV,KAAK,CAAC,4BAA4B,CAAC;EAClG,OAAOrB,KAAK,CAACU,GAAG,CAAC,GAAGT,OAAO,UAAUI,EAAE,EAAE,EAAE;IAAE,GAAGU,QAAQ,CAACI,IAAI;IAAED,QAAQ,EAAEY,YAAY,CAACE;EAAI,CAAC,CAAC;AAC9F,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}