{"ast":null,"code":"import axios from 'axios';\n\n// Sử dụng port 5000 vì json-server chạy trên port này theo lệnh: json-server --watch src/db.json --port 5000\nconst API_URL = 'http://localhost:5000';\n\n// Books API\nexport const getBooks = () => axios.get(`${API_URL}/books`);\nexport const getBookById = id => axios.get(`${API_URL}/books/${id}`);\nexport const addBook = book => axios.post(`${API_URL}/books`, book);\nexport const updateBook = (id, book) => axios.put(`${API_URL}/books/${id}`, book);\nexport const deleteBook = id => axios.delete(`${API_URL}/books/${id}`);\n\n// Users API\nexport const getUsers = () => axios.get(`${API_URL}/users`);\nexport const updateUser = (id, userData) => axios.put(`${API_URL}/users/${id}`, userData);\n\n// Authentication API\nexport const loginUser = async credentials => {\n  try {\n    const response = await axios.get(`${API_URL}/users`, {\n      params: {\n        email: credentials.email,\n        password: credentials.password\n      }\n    });\n    if (response.data.length === 0) throw new Error('Invalid credentials');\n    return {\n      data: {\n        ...response.data[0],\n        token: `mock_token_${response.data[0].id}`\n      }\n    };\n  } catch (error) {\n    throw new Error(error.message || 'Login failed');\n  }\n};\nexport const registerUser = userData => axios.post(`${API_URL}/users`, userData);\nexport const forgotPassword = async emailData => {\n  try {\n    const response = await axios.get(`${API_URL}/users`, {\n      params: {\n        email: emailData.email\n      }\n    });\n    if (response.data.length === 0) throw new Error('Email not found');\n    return {\n      data: {\n        message: 'Reset link sent'\n      }\n    };\n  } catch (error) {\n    throw new Error(error.message || 'Forgot password failed');\n  }\n};\nexport const changePassword = async (id, passwordData) => {\n  try {\n    const response = await axios.get(`${API_URL}/users/${id}`);\n    if (response.data.password !== passwordData.current) {\n      throw new Error('Current password incorrect');\n    }\n    return axios.put(`${API_URL}/users/${id}`, {\n      ...response.data,\n      password: passwordData.new\n    });\n  } catch (error) {\n    throw new Error(error.message || 'Change password failed');\n  }\n};\n\n// Orders API\nexport const getOrders = () => axios.get(`${API_URL}/orders`);\nexport const createOrder = orderData => axios.post(`${API_URL}/orders`, orderData);\nexport const updateOrderStatus = (id, statusData) => axios.put(`${API_URL}/orders/${id}`, {\n  ...statusData // statusData có thể chứa { status: \"new_status\" }\n});\nexport default {\n  getBooks,\n  getBookById,\n  addBook,\n  updateBook,\n  deleteBook,\n  getUsers,\n  loginUser,\n  registerUser,\n  updateUser,\n  forgotPassword,\n  changePassword,\n  getOrders,\n  createOrder,\n  updateOrderStatus\n};","map":{"version":3,"names":["axios","API_URL","getBooks","get","getBookById","id","addBook","book","post","updateBook","put","deleteBook","delete","getUsers","updateUser","userData","loginUser","credentials","response","params","email","password","data","length","Error","token","error","message","registerUser","forgotPassword","emailData","changePassword","passwordData","current","new","getOrders","createOrder","orderData","updateOrderStatus","statusData"],"sources":["C:/Users/DELL/OneDrive/Desktop/cc/bookstore-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Sử dụng port 5000 vì json-server chạy trên port này theo lệnh: json-server --watch src/db.json --port 5000\r\nconst API_URL = 'http://localhost:5000';\r\n\r\n// Books API\r\nexport const getBooks = () => axios.get(`${API_URL}/books`);\r\nexport const getBookById = (id) => axios.get(`${API_URL}/books/${id}`);\r\nexport const addBook = (book) => axios.post(`${API_URL}/books`, book);\r\nexport const updateBook = (id, book) => axios.put(`${API_URL}/books/${id}`, book);\r\nexport const deleteBook = (id) => axios.delete(`${API_URL}/books/${id}`);\r\n\r\n// Users API\r\nexport const getUsers = () => axios.get(`${API_URL}/users`);\r\nexport const updateUser = (id, userData) => axios.put(`${API_URL}/users/${id}`, userData);\r\n\r\n// Authentication API\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/users`, {\r\n      params: { email: credentials.email, password: credentials.password },\r\n    });\r\n    if (response.data.length === 0) throw new Error('Invalid credentials');\r\n    return { data: { ...response.data[0], token: `mock_token_${response.data[0].id}` } };\r\n  } catch (error) {\r\n    throw new Error(error.message || 'Login failed');\r\n  }\r\n};\r\n\r\nexport const registerUser = (userData) => axios.post(`${API_URL}/users`, userData);\r\n\r\nexport const forgotPassword = async (emailData) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/users`, {\r\n      params: { email: emailData.email },\r\n    });\r\n    if (response.data.length === 0) throw new Error('Email not found');\r\n    return { data: { message: 'Reset link sent' } };\r\n  } catch (error) {\r\n    throw new Error(error.message || 'Forgot password failed');\r\n  }\r\n};\r\n\r\nexport const changePassword = async (id, passwordData) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/users/${id}`);\r\n    if (response.data.password !== passwordData.current) {\r\n      throw new Error('Current password incorrect');\r\n    }\r\n    return axios.put(`${API_URL}/users/${id}`, { ...response.data, password: passwordData.new });\r\n  } catch (error) {\r\n    throw new Error(error.message || 'Change password failed');\r\n  }\r\n};\r\n\r\n// Orders API\r\nexport const getOrders = () => axios.get(`${API_URL}/orders`);\r\nexport const createOrder = (orderData) => axios.post(`${API_URL}/orders`, orderData);\r\nexport const updateOrderStatus = (id, statusData) => axios.put(`${API_URL}/orders/${id}`, {\r\n  ...statusData, // statusData có thể chứa { status: \"new_status\" }\r\n});\r\n\r\nexport default {\r\n  getBooks,\r\n  getBookById,\r\n  addBook,\r\n  updateBook,\r\n  deleteBook,\r\n  getUsers,\r\n  loginUser,\r\n  registerUser,\r\n  updateUser,\r\n  forgotPassword,\r\n  changePassword,\r\n  getOrders,\r\n  createOrder,\r\n  updateOrderStatus,\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}