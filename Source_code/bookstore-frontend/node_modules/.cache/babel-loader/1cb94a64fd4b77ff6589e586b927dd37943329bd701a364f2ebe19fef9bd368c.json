{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\22050110_DoSonTung_CD1\\\\Source_code_Demo\\\\bookstore-frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isEmployee, setIsEmployee] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [cartItems, setCartItems] = useState([]);\n  useEffect(() => {\n    const storedUser = sessionStorage.getItem('user');\n    console.log('Stored user in sessionStorage:', storedUser);\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        console.log('Parsed user:', parsedUser);\n        if (parsedUser && parsedUser.role) {\n          parsedUser.role = parsedUser.role.toLowerCase();\n          setUser(parsedUser);\n          setIsAdmin(parsedUser.role === 'admin');\n          setIsEmployee(parsedUser.role === 'employee');\n          console.log('User set successfully:', parsedUser);\n          // Load cart items for this user\n          const storedCart = sessionStorage.getItem(`cart_${parsedUser.id}`);\n          if (storedCart) {\n            setCartItems(JSON.parse(storedCart));\n          }\n        } else {\n          console.log('No role found in stored user, clearing sessionStorage');\n          sessionStorage.removeItem('user');\n        }\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        sessionStorage.removeItem('user');\n      }\n    } else {\n      console.log('No user found in sessionStorage');\n    }\n    setIsLoading(false);\n  }, []);\n  const login = async ({\n    identifier,\n    password\n  }) => {\n    const response = await axios.post('http://127.0.0.1:8000/api/login/', {\n      identifier,\n      password\n    });\n    return response.data;\n  };\n  const logout = () => {\n    setUser(null);\n    setIsAdmin(false);\n    setIsEmployee(false);\n    setCartItems([]);\n    sessionStorage.removeItem('user');\n    // Clear cart for the user\n    if (user) {\n      sessionStorage.removeItem(`cart_${user.id}`);\n    }\n  };\n  const addToCart = book => {\n    setCartItems(prevItems => {\n      const existingItem = prevItems.find(item => item.id === book.id);\n      let updatedItems;\n      if (existingItem) {\n        updatedItems = prevItems.map(item => item.id === book.id ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item);\n      } else {\n        updatedItems = [...prevItems, {\n          ...book,\n          quantity: 1\n        }];\n      }\n      // Save to sessionStorage\n      if (user) {\n        sessionStorage.setItem(`cart_${user.id}`, JSON.stringify(updatedItems));\n      }\n      return updatedItems;\n    });\n  };\n  const updateQuantity = (bookId, newQuantity) => {\n    if (newQuantity < 1) {\n      removeItem(bookId);\n      return;\n    }\n    setCartItems(prevItems => {\n      const updatedItems = prevItems.map(item => item.id === bookId ? {\n        ...item,\n        quantity: newQuantity\n      } : item);\n      // Save to sessionStorage\n      if (user) {\n        sessionStorage.setItem(`cart_${user.id}`, JSON.stringify(updatedItems));\n      }\n      return updatedItems;\n    });\n  };\n  const removeItem = bookId => {\n    setCartItems(prevItems => {\n      const updatedItems = prevItems.filter(item => item.id !== bookId);\n      // Save to sessionStorage\n      if (user) {\n        sessionStorage.setItem(`cart_${user.id}`, JSON.stringify(updatedItems));\n      }\n      return updatedItems;\n    });\n  };\n  const clearCart = () => {\n    setCartItems([]);\n    if (user) {\n      sessionStorage.removeItem(`cart_${user.id}`);\n    }\n  };\n  if (isLoading) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAdmin,\n      isEmployee,\n      login,\n      logout,\n      cartItems,\n      addToCart,\n      updateQuantity,\n      removeItem,\n      clearCart,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"1KUanbG1TA9ZuRsL91aCn7jDalk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAdmin","setIsAdmin","isEmployee","setIsEmployee","isLoading","setIsLoading","cartItems","setCartItems","storedUser","sessionStorage","getItem","console","log","parsedUser","JSON","parse","role","toLowerCase","storedCart","id","removeItem","error","login","identifier","password","response","post","data","logout","addToCart","book","prevItems","existingItem","find","item","updatedItems","map","quantity","setItem","stringify","updateQuantity","bookId","newQuantity","filter","clearCart","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/GitHub/22050110_DoSonTung_CD1/Source_code_Demo/bookstore-frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [isEmployee, setIsEmployee] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [cartItems, setCartItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const storedUser = sessionStorage.getItem('user');\r\n    console.log('Stored user in sessionStorage:', storedUser);\r\n    if (storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        console.log('Parsed user:', parsedUser);\r\n        if (parsedUser && parsedUser.role) {\r\n          parsedUser.role = parsedUser.role.toLowerCase();\r\n          setUser(parsedUser);\r\n          setIsAdmin(parsedUser.role === 'admin');\r\n          setIsEmployee(parsedUser.role === 'employee');\r\n          console.log('User set successfully:', parsedUser);\r\n          // Load cart items for this user\r\n          const storedCart = sessionStorage.getItem(`cart_${parsedUser.id}`);\r\n          if (storedCart) {\r\n            setCartItems(JSON.parse(storedCart));\r\n          }\r\n        } else {\r\n          console.log('No role found in stored user, clearing sessionStorage');\r\n          sessionStorage.removeItem('user');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing stored user:', error);\r\n        sessionStorage.removeItem('user');\r\n      }\r\n    } else {\r\n      console.log('No user found in sessionStorage');\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  const login = async ({ identifier, password }) => {\r\n  const response = await axios.post('http://127.0.0.1:8000/api/login/', {\r\n    identifier,\r\n    password,\r\n  });\r\n  return response.data;\r\n};\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAdmin(false);\r\n    setIsEmployee(false);\r\n    setCartItems([]);\r\n    sessionStorage.removeItem('user');\r\n    // Clear cart for the user\r\n    if (user) {\r\n      sessionStorage.removeItem(`cart_${user.id}`);\r\n    }\r\n  };\r\n\r\n  const addToCart = (book) => {\r\n    setCartItems((prevItems) => {\r\n      const existingItem = prevItems.find((item) => item.id === book.id);\r\n      let updatedItems;\r\n      if (existingItem) {\r\n        updatedItems = prevItems.map((item) =>\r\n          item.id === book.id ? { ...item, quantity: item.quantity + 1 } : item\r\n        );\r\n      } else {\r\n        updatedItems = [...prevItems, { ...book, quantity: 1 }];\r\n      }\r\n      // Save to sessionStorage\r\n      if (user) {\r\n        sessionStorage.setItem(`cart_${user.id}`, JSON.stringify(updatedItems));\r\n      }\r\n      return updatedItems;\r\n    });\r\n  };\r\n\r\n  const updateQuantity = (bookId, newQuantity) => {\r\n    if (newQuantity < 1) {\r\n      removeItem(bookId);\r\n      return;\r\n    }\r\n    setCartItems((prevItems) => {\r\n      const updatedItems = prevItems.map((item) =>\r\n        item.id === bookId ? { ...item, quantity: newQuantity } : item\r\n      );\r\n      // Save to sessionStorage\r\n      if (user) {\r\n        sessionStorage.setItem(`cart_${user.id}`, JSON.stringify(updatedItems));\r\n      }\r\n      return updatedItems;\r\n    });\r\n  };\r\n\r\n  const removeItem = (bookId) => {\r\n    setCartItems((prevItems) => {\r\n      const updatedItems = prevItems.filter((item) => item.id !== bookId);\r\n      // Save to sessionStorage\r\n      if (user) {\r\n        sessionStorage.setItem(`cart_${user.id}`, JSON.stringify(updatedItems));\r\n      }\r\n      return updatedItems;\r\n    });\r\n  };\r\n\r\n  const clearCart = () => {\r\n    setCartItems([]);\r\n    if (user) {\r\n      sessionStorage.removeItem(`cart_${user.id}`);\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        isAdmin,\r\n        isEmployee,\r\n        login,\r\n        logout,\r\n        cartItems,\r\n        addToCart,\r\n        updateQuantity,\r\n        removeItem,\r\n        clearCart,\r\n        isLoading,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}