{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5000';\nexport const getBooks = () => axios.get(`${API_URL}/books`);\nexport const getBookById = id => axios.get(`${API_URL}/books/${id}`);\nexport const addBook = book => axios.post(`${API_URL}/books`, book);\nexport const updateBook = (id, book) => axios.put(`${API_URL}/books/${id}`, book);\nexport const deleteBook = id => axios.delete(`${API_URL}/books/${id}`);\nexport const loginUser = async credentials => {\n  const response = await axios.get(`${API_URL}/users?email=${credentials.email}&password=${credentials.password}`);\n  if (response.data.length > 0) {\n    return {\n      data: {\n        ...response.data[0],\n        token: 'fake-token'\n      }\n    };\n  }\n  throw new Error('Invalid credentials');\n};\nexport const registerUser = async userData => {\n  const checkEmail = await axios.get(`${API_URL}/users?email=${userData.email}`);\n  if (checkEmail.data.length > 0) {\n    throw new Error('Email already exists');\n  }\n  const response = await axios.post(`${API_URL}/users`, {\n    ...userData,\n    role: 'user'\n  });\n  return response;\n};\nexport const updateUser = (id, userData) => axios.put(`${API_URL}/users/${id}`, userData);\nexport const changePassword = async (id, passwordData) => {\n  const userResponse = await axios.get(`${API_URL}/users/${id}`);\n  if (userResponse.data.password === passwordData.current) {\n    return axios.patch(`${API_URL}/users/${id}`, {\n      password: passwordData.new\n    });\n  }\n  throw new Error('Invalid current password');\n};\nexport const forgotPassword = async emailData => {\n  const response = await axios.get(`${API_URL}/users?email=${emailData.email}`);\n  if (response.data.length > 0) {\n    return Promise.resolve();\n  }\n  throw new Error('Email not found');\n};","map":{"version":3,"names":["axios","API_URL","getBooks","get","getBookById","id","addBook","book","post","updateBook","put","deleteBook","delete","loginUser","credentials","response","email","password","data","length","token","Error","registerUser","userData","checkEmail","role","updateUser","changePassword","passwordData","userResponse","current","patch","new","forgotPassword","emailData","Promise","resolve"],"sources":["C:/Users/DELL/OneDrive/Desktop/cc/bookstore-frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000';\r\n\r\nexport const getBooks = () => axios.get(`${API_URL}/books`);\r\nexport const getBookById = (id) => axios.get(`${API_URL}/books/${id}`);\r\nexport const addBook = (book) => axios.post(`${API_URL}/books`, book);\r\nexport const updateBook = (id, book) => axios.put(`${API_URL}/books/${id}`, book);\r\nexport const deleteBook = (id) => axios.delete(`${API_URL}/books/${id}`);\r\n\r\nexport const loginUser = async (credentials) => {\r\n  const response = await axios.get(`${API_URL}/users?email=${credentials.email}&password=${credentials.password}`);\r\n  if (response.data.length > 0) {\r\n    return { data: { ...response.data[0], token: 'fake-token' } };\r\n  }\r\n  throw new Error('Invalid credentials');\r\n};\r\n\r\nexport const registerUser = async (userData) => {\r\n  const checkEmail = await axios.get(`${API_URL}/users?email=${userData.email}`);\r\n  if (checkEmail.data.length > 0) {\r\n    throw new Error('Email already exists');\r\n  }\r\n  const response = await axios.post(`${API_URL}/users`, { ...userData, role: 'user' });\r\n  return response;\r\n};\r\n\r\nexport const updateUser = (id, userData) => axios.put(`${API_URL}/users/${id}`, userData);\r\n\r\nexport const changePassword = async (id, passwordData) => {\r\n  const userResponse = await axios.get(`${API_URL}/users/${id}`);\r\n  if (userResponse.data.password === passwordData.current) {\r\n    return axios.patch(`${API_URL}/users/${id}`, { password: passwordData.new });\r\n  }\r\n  throw new Error('Invalid current password');\r\n};\r\n\r\nexport const forgotPassword = async (emailData) => {\r\n  const response = await axios.get(`${API_URL}/users?email=${emailData.email}`);\r\n  if (response.data.length > 0) {\r\n    return Promise.resolve();\r\n  }\r\n  throw new Error('Email not found');\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}