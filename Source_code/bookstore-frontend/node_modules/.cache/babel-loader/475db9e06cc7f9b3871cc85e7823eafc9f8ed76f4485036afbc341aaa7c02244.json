{"ast":null,"code":"// src/services/mockApi.js\nconst mockUsers = [{\n  id: 1,\n  name: 'User Test',\n  email: 'user@test.com',\n  password: 'password123',\n  role: 'user'\n}, {\n  id: 2,\n  name: 'Admin Test',\n  email: 'admin@test.com',\n  password: 'password123',\n  role: 'admin'\n}];\nconst mockBooks = [{\n  id: 1,\n  title: 'The Great Gatsby',\n  author: 'F. Scott Fitzgerald',\n  price: 10.99,\n  publisher: 'Scribner',\n  language: 'English',\n  genre: 'Fiction',\n  coverImage: 'https://via.placeholder.com/300x400?text=Great+Gatsby',\n  quantity: 5\n}, {\n  id: 2,\n  title: '1984',\n  author: 'George Orwell',\n  price: 8.99,\n  publisher: 'Secker & Warburg',\n  language: 'English',\n  genre: 'Dystopia',\n  coverImage: 'https://via.placeholder.com/300x400?text=1984',\n  quantity: 3\n}];\nexport const getBooks = () => Promise.resolve({\n  data: mockBooks\n});\nexport const getBookById = id => Promise.resolve({\n  data: mockBooks.find(book => book.id === parseInt(id))\n});\nexport const addBook = book => {\n  const newBook = {\n    ...book,\n    id: mockBooks.length + 1\n  };\n  mockBooks.push(newBook);\n  return Promise.resolve({\n    data: newBook\n  });\n};\nexport const updateBook = (id, book) => {\n  const index = mockBooks.findIndex(b => b.id === parseInt(id));\n  if (index !== -1) {\n    mockBooks[index] = {\n      ...mockBooks[index],\n      ...book\n    };\n    return Promise.resolve({\n      data: mockBooks[index]\n    });\n  }\n  return Promise.reject('Book not found');\n};\nexport const deleteBook = id => {\n  const index = mockBooks.findIndex(b => b.id === parseInt(id));\n  if (index !== -1) {\n    mockBooks.splice(index, 1);\n    return Promise.resolve();\n  }\n  return Promise.reject('Book not found');\n};\nexport const loginUser = credentials => {\n  const user = mockUsers.find(u => u.email === credentials.email && u.password === credentials.password);\n  if (user) {\n    return Promise.resolve({\n      data: {\n        ...user,\n        token: 'mock-token'\n      }\n    });\n  }\n  return Promise.reject('Invalid credentials');\n};\nexport const registerUser = userData => {\n  if (mockUsers.some(u => u.email === userData.email)) {\n    return Promise.reject('Email already exists');\n  }\n  const newUser = {\n    ...userData,\n    id: mockUsers.length + 1,\n    role: 'user'\n  };\n  mockUsers.push(newUser);\n  return Promise.resolve({\n    data: newUser\n  });\n};\nexport const updateUser = (id, userData) => {\n  const index = mockUsers.findIndex(u => u.id === parseInt(id));\n  if (index !== -1) {\n    mockUsers[index] = {\n      ...mockUsers[index],\n      ...userData\n    };\n    return Promise.resolve({\n      data: mockUsers[index]\n    });\n  }\n  return Promise.reject('User not found');\n};\nexport const changePassword = (id, passwordData) => {\n  const index = mockUsers.findIndex(u => u.id === parseInt(id));\n  if (index !== -1 && passwordData.current === mockUsers[index].password) {\n    mockUsers[index].password = passwordData.new;\n    return Promise.resolve();\n  }\n  return Promise.reject('Invalid current password');\n};\nexport const forgotPassword = emailData => {\n  if (mockUsers.some(u => u.email === emailData.email)) {\n    return Promise.resolve();\n  }\n  return Promise.reject('Email not found');\n};","map":{"version":3,"names":["mockUsers","id","name","email","password","role","mockBooks","title","author","price","publisher","language","genre","coverImage","quantity","getBooks","Promise","resolve","data","getBookById","find","book","parseInt","addBook","newBook","length","push","updateBook","index","findIndex","b","reject","deleteBook","splice","loginUser","credentials","user","u","token","registerUser","userData","some","newUser","updateUser","changePassword","passwordData","current","new","forgotPassword","emailData"],"sources":["C:/Users/DELL/OneDrive/Desktop/cc/bookstore-frontend/src/services/mockApi.js"],"sourcesContent":["// src/services/mockApi.js\r\nconst mockUsers = [\r\n    { id: 1, name: 'User Test', email: 'user@test.com', password: 'password123', role: 'user' },\r\n    { id: 2, name: 'Admin Test', email: 'admin@test.com', password: 'password123', role: 'admin' },\r\n  ];\r\n  \r\n  const mockBooks = [\r\n    {\r\n      id: 1,\r\n      title: 'The Great Gatsby',\r\n      author: 'F. Scott Fitzgerald',\r\n      price: 10.99,\r\n      publisher: 'Scribner',\r\n      language: 'English',\r\n      genre: 'Fiction',\r\n      coverImage: 'https://via.placeholder.com/300x400?text=Great+Gatsby',\r\n      quantity: 5,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: '1984',\r\n      author: 'George Orwell',\r\n      price: 8.99,\r\n      publisher: 'Secker & Warburg',\r\n      language: 'English',\r\n      genre: 'Dystopia',\r\n      coverImage: 'https://via.placeholder.com/300x400?text=1984',\r\n      quantity: 3,\r\n    },\r\n  ];\r\n  \r\n  export const getBooks = () => Promise.resolve({ data: mockBooks });\r\n  \r\n  export const getBookById = (id) => \r\n    Promise.resolve({ data: mockBooks.find(book => book.id === parseInt(id)) });\r\n  \r\n  export const addBook = (book) => {\r\n    const newBook = { ...book, id: mockBooks.length + 1 };\r\n    mockBooks.push(newBook);\r\n    return Promise.resolve({ data: newBook });\r\n  };\r\n  \r\n  export const updateBook = (id, book) => {\r\n    const index = mockBooks.findIndex(b => b.id === parseInt(id));\r\n    if (index !== -1) {\r\n      mockBooks[index] = { ...mockBooks[index], ...book };\r\n      return Promise.resolve({ data: mockBooks[index] });\r\n    }\r\n    return Promise.reject('Book not found');\r\n  };\r\n  \r\n  export const deleteBook = (id) => {\r\n    const index = mockBooks.findIndex(b => b.id === parseInt(id));\r\n    if (index !== -1) {\r\n      mockBooks.splice(index, 1);\r\n      return Promise.resolve();\r\n    }\r\n    return Promise.reject('Book not found');\r\n  };\r\n  \r\n  export const loginUser = (credentials) => {\r\n    const user = mockUsers.find(\r\n      u => u.email === credentials.email && u.password === credentials.password\r\n    );\r\n    if (user) {\r\n      return Promise.resolve({ data: { ...user, token: 'mock-token' } });\r\n    }\r\n    return Promise.reject('Invalid credentials');\r\n  };\r\n  \r\n  export const registerUser = (userData) => {\r\n    if (mockUsers.some(u => u.email === userData.email)) {\r\n      return Promise.reject('Email already exists');\r\n    }\r\n    const newUser = { ...userData, id: mockUsers.length + 1, role: 'user' };\r\n    mockUsers.push(newUser);\r\n    return Promise.resolve({ data: newUser });\r\n  };\r\n  \r\n  export const updateUser = (id, userData) => {\r\n    const index = mockUsers.findIndex(u => u.id === parseInt(id));\r\n    if (index !== -1) {\r\n      mockUsers[index] = { ...mockUsers[index], ...userData };\r\n      return Promise.resolve({ data: mockUsers[index] });\r\n    }\r\n    return Promise.reject('User not found');\r\n  };\r\n  \r\n  export const changePassword = (id, passwordData) => {\r\n    const index = mockUsers.findIndex(u => u.id === parseInt(id));\r\n    if (index !== -1 && passwordData.current === mockUsers[index].password) {\r\n      mockUsers[index].password = passwordData.new;\r\n      return Promise.resolve();\r\n    }\r\n    return Promise.reject('Invalid current password');\r\n  };\r\n  \r\n  export const forgotPassword = (emailData) => {\r\n    if (mockUsers.some(u => u.email === emailData.email)) {\r\n      return Promise.resolve();\r\n    }\r\n    return Promise.reject('Email not found');\r\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}