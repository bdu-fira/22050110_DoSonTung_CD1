{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\n\n// Mock data\nconst mockUsers = [{\n  id: 1,\n  name: 'John Doe',\n  email: 'john@example.com',\n  password: 'password123',\n  role: 'user'\n}, {\n  id: 2,\n  name: 'Admin User',\n  email: 'admin@example.com',\n  password: 'admin123',\n  role: 'admin'\n}];\nconst mockBooks = [{\n  id: 1,\n  title: 'Book 1',\n  author: 'Author 1',\n  price: 10.99,\n  publisher: 'Pub 1',\n  language: 'English',\n  genre: 'Fiction'\n}, {\n  id: 2,\n  title: 'Book 2',\n  author: 'Author 2',\n  price: 15.99,\n  publisher: 'Pub 2',\n  language: 'English',\n  genre: 'Non-fiction'\n}];\n\n// Giả lập delay như API thật\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const getBooks = async () => {\n  await delay(500);\n  return {\n    data: mockBooks\n  };\n};\nexport const getBookById = async id => {\n  await delay(500);\n  const book = mockBooks.find(b => b.id === parseInt(id));\n  return {\n    data: book || null\n  };\n};\nexport const addBook = async book => {\n  await delay(500);\n  const newBook = {\n    ...book,\n    id: mockBooks.length + 1\n  };\n  mockBooks.push(newBook);\n  return {\n    data: newBook\n  };\n};\nexport const updateBook = async (id, book) => {\n  await delay(500);\n  const index = mockBooks.findIndex(b => b.id === parseInt(id));\n  if (index !== -1) {\n    mockBooks[index] = {\n      ...book,\n      id: parseInt(id)\n    };\n    return {\n      data: mockBooks[index]\n    };\n  }\n  throw new Error('Book not found');\n};\nexport const deleteBook = async id => {\n  await delay(500);\n  const index = mockBooks.findIndex(b => b.id === parseInt(id));\n  if (index !== -1) {\n    mockBooks.splice(index, 1);\n    return {\n      data: 'Book deleted'\n    };\n  }\n  throw new Error('Book not found');\n};\nexport const loginUser = async credentials => {\n  await delay(500);\n  const user = mockUsers.find(u => u.email === credentials.email && u.password === credentials.password);\n  if (user) {\n    return {\n      data: {\n        ...user,\n        password: undefined\n      }\n    }; // Không trả về password\n  }\n  throw new Error('Invalid credentials');\n};\nexport const registerUser = async userData => {\n  await delay(500);\n  const existingUser = mockUsers.find(u => u.email === userData.email);\n  if (existingUser) {\n    throw new Error('Email already exists');\n  }\n  const newUser = {\n    id: mockUsers.length + 1,\n    name: userData.name,\n    email: userData.email,\n    password: userData.password,\n    role: 'user'\n  };\n  mockUsers.push(newUser);\n  return {\n    data: {\n      ...newUser,\n      password: undefined\n    }\n  };\n};\nexport const updateUser = async (id, userData) => {\n  await delay(500);\n  const index = mockUsers.findIndex(u => u.id === parseInt(id));\n  if (index !== -1) {\n    mockUsers[index] = {\n      ...mockUsers[index],\n      ...userData\n    };\n    return {\n      data: {\n        ...mockUsers[index],\n        password: undefined\n      }\n    };\n  }\n  throw new Error('User not found');\n};\nexport const changePassword = async (id, passwordData) => {\n  await delay(500);\n  const index = mockUsers.findIndex(u => u.id === parseInt(id));\n  if (index !== -1) {\n    if (mockUsers[index].password !== passwordData.current) {\n      throw new Error('Current password is incorrect');\n    }\n    mockUsers[index].password = passwordData.new;\n    return {\n      data: 'Password changed successfully'\n    };\n  }\n  throw new Error('User not found');\n};\nexport const forgotPassword = async emailData => {\n  await delay(500);\n  const user = mockUsers.find(u => u.email === emailData.email);\n  if (!user) {\n    throw new Error('Email not found');\n  }\n  // Giả lập gửi email\n  console.log(`Reset link sent to ${emailData.email}`);\n  return {\n    data: 'Reset link sent'\n  };\n};","map":{"version":3,"names":["axios","mockUsers","id","name","email","password","role","mockBooks","title","author","price","publisher","language","genre","delay","ms","Promise","resolve","setTimeout","getBooks","data","getBookById","book","find","b","parseInt","addBook","newBook","length","push","updateBook","index","findIndex","Error","deleteBook","splice","loginUser","credentials","user","u","undefined","registerUser","userData","existingUser","newUser","updateUser","changePassword","passwordData","current","new","forgotPassword","emailData","console","log"],"sources":["C:/Users/DELL/OneDrive/Desktop/cc/bookstore-frontend/src/pages/Login.js"],"sourcesContent":["// src/services/api.js\r\nimport axios from 'axios';\r\n\r\n// Mock data\r\nconst mockUsers = [\r\n  {\r\n    id: 1,\r\n    name: 'John Doe',\r\n    email: 'john@example.com',\r\n    password: 'password123',\r\n    role: 'user'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Admin User',\r\n    email: 'admin@example.com',\r\n    password: 'admin123',\r\n    role: 'admin'\r\n  }\r\n];\r\n\r\nconst mockBooks = [\r\n  { id: 1, title: 'Book 1', author: 'Author 1', price: 10.99, publisher: 'Pub 1', language: 'English', genre: 'Fiction' },\r\n  { id: 2, title: 'Book 2', author: 'Author 2', price: 15.99, publisher: 'Pub 2', language: 'English', genre: 'Non-fiction' }\r\n];\r\n\r\n// Giả lập delay như API thật\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nexport const getBooks = async () => {\r\n  await delay(500);\r\n  return { data: mockBooks };\r\n};\r\n\r\nexport const getBookById = async (id) => {\r\n  await delay(500);\r\n  const book = mockBooks.find(b => b.id === parseInt(id));\r\n  return { data: book || null };\r\n};\r\n\r\nexport const addBook = async (book) => {\r\n  await delay(500);\r\n  const newBook = { ...book, id: mockBooks.length + 1 };\r\n  mockBooks.push(newBook);\r\n  return { data: newBook };\r\n};\r\n\r\nexport const updateBook = async (id, book) => {\r\n  await delay(500);\r\n  const index = mockBooks.findIndex(b => b.id === parseInt(id));\r\n  if (index !== -1) {\r\n    mockBooks[index] = { ...book, id: parseInt(id) };\r\n    return { data: mockBooks[index] };\r\n  }\r\n  throw new Error('Book not found');\r\n};\r\n\r\nexport const deleteBook = async (id) => {\r\n  await delay(500);\r\n  const index = mockBooks.findIndex(b => b.id === parseInt(id));\r\n  if (index !== -1) {\r\n    mockBooks.splice(index, 1);\r\n    return { data: 'Book deleted' };\r\n  }\r\n  throw new Error('Book not found');\r\n};\r\n\r\nexport const loginUser = async (credentials) => {\r\n  await delay(500);\r\n  const user = mockUsers.find(\r\n    u => u.email === credentials.email && u.password === credentials.password\r\n  );\r\n  if (user) {\r\n    return { data: { ...user, password: undefined } }; // Không trả về password\r\n  }\r\n  throw new Error('Invalid credentials');\r\n};\r\n\r\nexport const registerUser = async (userData) => {\r\n  await delay(500);\r\n  const existingUser = mockUsers.find(u => u.email === userData.email);\r\n  if (existingUser) {\r\n    throw new Error('Email already exists');\r\n  }\r\n  const newUser = {\r\n    id: mockUsers.length + 1,\r\n    name: userData.name,\r\n    email: userData.email,\r\n    password: userData.password,\r\n    role: 'user'\r\n  };\r\n  mockUsers.push(newUser);\r\n  return { data: { ...newUser, password: undefined } };\r\n};\r\n\r\nexport const updateUser = async (id, userData) => {\r\n  await delay(500);\r\n  const index = mockUsers.findIndex(u => u.id === parseInt(id));\r\n  if (index !== -1) {\r\n    mockUsers[index] = { ...mockUsers[index], ...userData };\r\n    return { data: { ...mockUsers[index], password: undefined } };\r\n  }\r\n  throw new Error('User not found');\r\n};\r\n\r\nexport const changePassword = async (id, passwordData) => {\r\n  await delay(500);\r\n  const index = mockUsers.findIndex(u => u.id === parseInt(id));\r\n  if (index !== -1) {\r\n    if (mockUsers[index].password !== passwordData.current) {\r\n      throw new Error('Current password is incorrect');\r\n    }\r\n    mockUsers[index].password = passwordData.new;\r\n    return { data: 'Password changed successfully' };\r\n  }\r\n  throw new Error('User not found');\r\n};\r\n\r\nexport const forgotPassword = async (emailData) => {\r\n  await delay(500);\r\n  const user = mockUsers.find(u => u.email === emailData.email);\r\n  if (!user) {\r\n    throw new Error('Email not found');\r\n  }\r\n  // Giả lập gửi email\r\n  console.log(`Reset link sent to ${emailData.email}`);\r\n  return { data: 'Reset link sent' };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}