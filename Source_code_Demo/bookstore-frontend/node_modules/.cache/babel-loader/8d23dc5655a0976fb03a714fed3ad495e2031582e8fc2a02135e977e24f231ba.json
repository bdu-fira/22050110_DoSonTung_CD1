{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Desktop\\\\cc\\\\bookstore-frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport * as api from '../services/api';\n\n// Tạo AuthContext để quản lý trạng thái xác thực\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  // State lưu thông tin user (null nếu chưa đăng nhập)\n  const [user, setUser] = useState(null);\n  // State kiểm tra vai trò admin\n  const [isAdmin, setIsAdmin] = useState(false);\n  // State kiểm tra vai trò employee\n  const [isEmployee, setIsEmployee] = useState(false);\n  // State kiểm tra trạng thái tải dữ liệu\n  const [isLoading, setIsLoading] = useState(true);\n  // State lưu giỏ hàng để đồng bộ với backend\n  const [cartItems, setCartItems] = useState([]);\n\n  // Kiểm tra trạng thái đăng nhập khi ứng dụng khởi động\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const storedUser = sessionStorage.getItem('user');\n      console.log('Stored user in sessionStorage:', storedUser);\n      if (storedUser) {\n        try {\n          const parsedUser = JSON.parse(storedUser);\n          console.log('Parsed user:', parsedUser);\n          if (parsedUser && parsedUser.role) {\n            parsedUser.role = parsedUser.role.toLowerCase();\n            setUser(parsedUser);\n            setIsAdmin(parsedUser.role === 'admin');\n            setIsEmployee(parsedUser.role === 'employee');\n            console.log('User set successfully:', parsedUser);\n            // Đồng bộ giỏ hàng từ backend\n            if (parsedUser.id) {\n              try {\n                const cartResponse = await api.getCart(parsedUser.id);\n                setCartItems(cartResponse.items || []);\n                console.log('Cart synced from backend:', cartResponse.items);\n              } catch (error) {\n                console.error('Error syncing cart:', error);\n                setCartItems([]);\n              }\n            }\n          } else {\n            console.log('No role found in stored user, clearing sessionStorage');\n            sessionStorage.removeItem('user');\n            setCartItems([]);\n          }\n        } catch (error) {\n          console.error('Error parsing stored user:', error);\n          sessionStorage.removeItem('user');\n          setCartItems([]);\n        }\n      } else {\n        console.log('No user found in sessionStorage');\n        setCartItems([]);\n      }\n      setIsLoading(false);\n    };\n    initializeAuth();\n  }, []);\n\n  // Hàm đăng nhập\n  const login = async credentials => {\n    try {\n      const response = await api.loginUser(credentials);\n      const userData = response.data; // POST trả về dữ liệu trực tiếp, không cần res.data[0]\n      console.log('User data from API:', userData);\n      if (!userData || !userData.role) {\n        throw new Error('User role not provided by API');\n      }\n      userData.role = userData.role.toLowerCase();\n      setUser(userData);\n      setIsAdmin(userData.role === 'admin');\n      setIsEmployee(userData.role === 'employee');\n      sessionStorage.setItem('user', JSON.stringify(userData));\n      console.log('User saved to sessionStorage:', userData);\n      // Đồng bộ giỏ hàng từ backend\n      if (userData.id) {\n        try {\n          const cartResponse = await api.getCart(userData.id);\n          setCartItems(cartResponse.items || []);\n          console.log('Cart synced from backend after login:', cartResponse.items);\n        } catch (error) {\n          console.error('Error syncing cart after login:', error);\n          setCartItems([]);\n        }\n      }\n      return userData;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw new Error('Login failed');\n    }\n  };\n\n  // Hàm đăng xuất\n  const logout = () => {\n    setUser(null);\n    setIsAdmin(false);\n    setIsEmployee(false);\n    setCartItems([]); // Xóa giỏ hàng trong state\n    sessionStorage.removeItem('user');\n    console.log('User logged out, sessionStorage cleared');\n  };\n\n  // Kiểm tra trạng thái tải\n  if (isLoading) {\n    return null;\n  }\n\n  // Cung cấp giá trị cho context\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAdmin,\n      isEmployee,\n      login,\n      logout,\n      isLoading,\n      cartItems,\n      setCartItems\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n// Hook để sử dụng AuthContext\n_s(AuthProvider, \"1KUanbG1TA9ZuRsL91aCn7jDalk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAdmin","setIsAdmin","isEmployee","setIsEmployee","isLoading","setIsLoading","cartItems","setCartItems","initializeAuth","storedUser","sessionStorage","getItem","console","log","parsedUser","JSON","parse","role","toLowerCase","id","cartResponse","getCart","items","error","removeItem","login","credentials","response","loginUser","userData","data","Error","setItem","stringify","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Desktop/cc/bookstore-frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport * as api from '../services/api';\r\n\r\n// Tạo AuthContext để quản lý trạng thái xác thực\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  // State lưu thông tin user (null nếu chưa đăng nhập)\r\n  const [user, setUser] = useState(null);\r\n  // State kiểm tra vai trò admin\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  // State kiểm tra vai trò employee\r\n  const [isEmployee, setIsEmployee] = useState(false);\r\n  // State kiểm tra trạng thái tải dữ liệu\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  // State lưu giỏ hàng để đồng bộ với backend\r\n  const [cartItems, setCartItems] = useState([]);\r\n\r\n  // Kiểm tra trạng thái đăng nhập khi ứng dụng khởi động\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      const storedUser = sessionStorage.getItem('user');\r\n      console.log('Stored user in sessionStorage:', storedUser);\r\n      if (storedUser) {\r\n        try {\r\n          const parsedUser = JSON.parse(storedUser);\r\n          console.log('Parsed user:', parsedUser);\r\n          if (parsedUser && parsedUser.role) {\r\n            parsedUser.role = parsedUser.role.toLowerCase();\r\n            setUser(parsedUser);\r\n            setIsAdmin(parsedUser.role === 'admin');\r\n            setIsEmployee(parsedUser.role === 'employee');\r\n            console.log('User set successfully:', parsedUser);\r\n            // Đồng bộ giỏ hàng từ backend\r\n            if (parsedUser.id) {\r\n              try {\r\n                const cartResponse = await api.getCart(parsedUser.id);\r\n                setCartItems(cartResponse.items || []);\r\n                console.log('Cart synced from backend:', cartResponse.items);\r\n              } catch (error) {\r\n                console.error('Error syncing cart:', error);\r\n                setCartItems([]);\r\n              }\r\n            }\r\n          } else {\r\n            console.log('No role found in stored user, clearing sessionStorage');\r\n            sessionStorage.removeItem('user');\r\n            setCartItems([]);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error parsing stored user:', error);\r\n          sessionStorage.removeItem('user');\r\n          setCartItems([]);\r\n        }\r\n      } else {\r\n        console.log('No user found in sessionStorage');\r\n        setCartItems([]);\r\n      }\r\n      setIsLoading(false);\r\n    };\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  // Hàm đăng nhập\r\n  const login = async (credentials) => {\r\n    try {\r\n      const response = await api.loginUser(credentials);\r\n      const userData = response.data; // POST trả về dữ liệu trực tiếp, không cần res.data[0]\r\n      console.log('User data from API:', userData);\r\n      if (!userData || !userData.role) {\r\n        throw new Error('User role not provided by API');\r\n      }\r\n      userData.role = userData.role.toLowerCase();\r\n      setUser(userData);\r\n      setIsAdmin(userData.role === 'admin');\r\n      setIsEmployee(userData.role === 'employee');\r\n      sessionStorage.setItem('user', JSON.stringify(userData));\r\n      console.log('User saved to sessionStorage:', userData);\r\n      // Đồng bộ giỏ hàng từ backend\r\n      if (userData.id) {\r\n        try {\r\n          const cartResponse = await api.getCart(userData.id);\r\n          setCartItems(cartResponse.items || []);\r\n          console.log('Cart synced from backend after login:', cartResponse.items);\r\n        } catch (error) {\r\n          console.error('Error syncing cart after login:', error);\r\n          setCartItems([]);\r\n        }\r\n      }\r\n      return userData;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw new Error('Login failed');\r\n    }\r\n  };\r\n\r\n  // Hàm đăng xuất\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAdmin(false);\r\n    setIsEmployee(false);\r\n    setCartItems([]); // Xóa giỏ hàng trong state\r\n    sessionStorage.removeItem('user');\r\n    console.log('User logged out, sessionStorage cleared');\r\n  };\r\n\r\n  // Kiểm tra trạng thái tải\r\n  if (isLoading) {\r\n    return null;\r\n  }\r\n\r\n  // Cung cấp giá trị cho context\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ user, isAdmin, isEmployee, login, logout, isLoading, cartItems, setCartItems }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\n// Hook để sử dụng AuthContext\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}