{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Desktop\\\\cc\\\\bookstore-frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport * as api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isEmployee, setIsEmployee] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const storedUser = sessionStorage.getItem('user');\n    console.log('Stored user in sessionStorage:', storedUser);\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        console.log('Parsed user:', parsedUser);\n        if (parsedUser && parsedUser.role && parsedUser.id) {\n          // Kiểm tra thêm parsedUser.id\n          parsedUser.role = parsedUser.role.toLowerCase();\n          setUser(parsedUser);\n          setIsAdmin(parsedUser.role === 'admin');\n          setIsEmployee(parsedUser.role === 'employee');\n          console.log('User set successfully:', parsedUser);\n        } else {\n          console.log('No role or id found in stored user, clearing sessionStorage');\n          sessionStorage.removeItem('user');\n        }\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        sessionStorage.removeItem('user');\n      }\n    } else {\n      console.log('No user found in sessionStorage');\n    }\n    setIsLoading(false);\n  }, []);\n  const login = async credentials => {\n    try {\n      const response = await api.loginUser(credentials);\n      const userData = response.data;\n      console.log('User data from API:', userData);\n      if (!userData || !userData.role || !userData.id) {\n        // Kiểm tra userData.id\n        throw new Error('User role or id not provided by API');\n      }\n      userData.role = userData.role.toLowerCase();\n      setUser(userData);\n      setIsAdmin(userData.role === 'admin');\n      setIsEmployee(userData.role === 'employee');\n      sessionStorage.setItem('user', JSON.stringify(userData));\n      console.log('User saved to sessionStorage:', userData);\n      // Xóa giỏ hàng guest và đồng bộ giỏ hàng của user\n      localStorage.removeItem('cart_guest');\n      const cartData = await api.getCart(userData.id);\n      if (cartData.items && cartData.items.length > 0) {\n        localStorage.setItem(`cart_${userData.id}`, JSON.stringify(cartData.items));\n      }\n      return userData;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw new Error('Login failed');\n    }\n  };\n  const logout = () => {\n    const cartKey = user ? `cart_${user.id}` : 'cart_guest';\n    setUser(null);\n    setIsAdmin(false);\n    setIsEmployee(false);\n    sessionStorage.removeItem('user');\n    localStorage.removeItem(cartKey); // Xóa giỏ hàng của user hiện tại\n    // Xóa giỏ hàng trên backend nếu có\n    if (user) {\n      api.updateCart(user.id, []).catch(err => console.error('Error clearing cart on logout:', err));\n    }\n  };\n  if (isLoading) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAdmin,\n      isEmployee,\n      login,\n      logout,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"4qS01q4aq79QyoamVPhktpGwnts=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAdmin","setIsAdmin","isEmployee","setIsEmployee","isLoading","setIsLoading","storedUser","sessionStorage","getItem","console","log","parsedUser","JSON","parse","role","id","toLowerCase","removeItem","error","login","credentials","response","loginUser","userData","data","Error","setItem","stringify","localStorage","cartData","getCart","items","length","logout","cartKey","updateCart","catch","err","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Desktop/cc/bookstore-frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport * as api from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [isEmployee, setIsEmployee] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const storedUser = sessionStorage.getItem('user');\r\n    console.log('Stored user in sessionStorage:', storedUser);\r\n    if (storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        console.log('Parsed user:', parsedUser);\r\n        if (parsedUser && parsedUser.role && parsedUser.id) { // Kiểm tra thêm parsedUser.id\r\n          parsedUser.role = parsedUser.role.toLowerCase();\r\n          setUser(parsedUser);\r\n          setIsAdmin(parsedUser.role === 'admin');\r\n          setIsEmployee(parsedUser.role === 'employee');\r\n          console.log('User set successfully:', parsedUser);\r\n        } else {\r\n          console.log('No role or id found in stored user, clearing sessionStorage');\r\n          sessionStorage.removeItem('user');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing stored user:', error);\r\n        sessionStorage.removeItem('user');\r\n      }\r\n    } else {\r\n      console.log('No user found in sessionStorage');\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      const response = await api.loginUser(credentials);\r\n      const userData = response.data;\r\n      console.log('User data from API:', userData);\r\n      if (!userData || !userData.role || !userData.id) { // Kiểm tra userData.id\r\n        throw new Error('User role or id not provided by API');\r\n      }\r\n      userData.role = userData.role.toLowerCase();\r\n      setUser(userData);\r\n      setIsAdmin(userData.role === 'admin');\r\n      setIsEmployee(userData.role === 'employee');\r\n      sessionStorage.setItem('user', JSON.stringify(userData));\r\n      console.log('User saved to sessionStorage:', userData);\r\n      // Xóa giỏ hàng guest và đồng bộ giỏ hàng của user\r\n      localStorage.removeItem('cart_guest');\r\n      const cartData = await api.getCart(userData.id);\r\n      if (cartData.items && cartData.items.length > 0) {\r\n        localStorage.setItem(`cart_${userData.id}`, JSON.stringify(cartData.items));\r\n      }\r\n      return userData;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw new Error('Login failed');\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    const cartKey = user ? `cart_${user.id}` : 'cart_guest';\r\n    setUser(null);\r\n    setIsAdmin(false);\r\n    setIsEmployee(false);\r\n    sessionStorage.removeItem('user');\r\n    localStorage.removeItem(cartKey); // Xóa giỏ hàng của user hiện tại\r\n    // Xóa giỏ hàng trên backend nếu có\r\n    if (user) {\r\n      api.updateCart(user.id, []).catch(err => console.error('Error clearing cart on logout:', err));\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, isAdmin, isEmployee, login, logout, isLoading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}